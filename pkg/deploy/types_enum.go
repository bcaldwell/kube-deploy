// Code generated by go-enum
// DO NOT EDIT!

package deploy

import (
	"fmt"
	"strings"
)

const (
	// RenderEngineAuto is a RenderEngine of type Auto
	RenderEngineAuto RenderEngine = iota
	// RenderEngineNone is a RenderEngine of type None
	RenderEngineNone
	// RenderEngineHelm is a RenderEngine of type Helm
	RenderEngineHelm
	// RenderEngineKustomize is a RenderEngine of type Kustomize
	RenderEngineKustomize
)

const _RenderEngineName = "AutoNoneHelmKustomize"

var _RenderEngineMap = map[RenderEngine]string{
	0: _RenderEngineName[0:4],
	1: _RenderEngineName[4:8],
	2: _RenderEngineName[8:12],
	3: _RenderEngineName[12:21],
}

// String implements the Stringer interface.
func (x RenderEngine) String() string {
	if str, ok := _RenderEngineMap[x]; ok {
		return str
	}
	return fmt.Sprintf("RenderEngine(%d)", x)
}

var _RenderEngineValue = map[string]RenderEngine{
	_RenderEngineName[0:4]:                    0,
	strings.ToLower(_RenderEngineName[0:4]):   0,
	_RenderEngineName[4:8]:                    1,
	strings.ToLower(_RenderEngineName[4:8]):   1,
	_RenderEngineName[8:12]:                   2,
	strings.ToLower(_RenderEngineName[8:12]):  2,
	_RenderEngineName[12:21]:                  3,
	strings.ToLower(_RenderEngineName[12:21]): 3,
}

// ParseRenderEngine attempts to convert a string to a RenderEngine
func ParseRenderEngine(name string) (RenderEngine, error) {
	if x, ok := _RenderEngineValue[name]; ok {
		return x, nil
	}
	return RenderEngine(0), fmt.Errorf("%s is not a valid RenderEngine", name)
}

// MarshalText implements the text marshaller method
func (x RenderEngine) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method
func (x *RenderEngine) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseRenderEngine(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
